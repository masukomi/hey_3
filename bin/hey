#!/usr/bin/env raku
# Copyright (C) 2022 Kay Rhodes (a.k.a masukomi)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# YOUR CONTRIBUTIONS, FINANCIAL, OR CODE, TO MAKING THIS A BETTER TOOL
# ARE GREATLY APPRECIATED. See https://interrupttracker.com



# Dear Developer who is not me.
# Thanks for your curiousity about this code.
# Please know that it was written in a mad rush,
# and as such, it could use a lot of refactoring.
# Any improvements you can offer will be welcomed.
# - masukomi

use v6;
use DB::SQLite;
use XDG::GuaranteedResources;
use Listicles;
use DateTime::Format;
use Definitely;
use Hey::Database;
use Hey::Event;
use Hey::Exceptions;
use Hey::Interruption;
use Hey::Person;
use Hey::Project;
use Hey::Resourcer;
use Hey::Tag;
use Hey::Timer;
use Hey::Utilities;


# DEAR DEVELOPER:
# The MAIN methods in this file have been ordered in such a way
# as to make the "Usage:" output most benificial to users. The
# things they're most likely to want to look up are listed towards
# the top. It makes things harder for us to code on, but I think
# the trade-off is worth it.
#
# Feel free to refactor any of this.


# alas, these come from Date.pm6 but they're not
# extractable from it :(
constant uninterruptable = < kill log log-interrupts projects running start stop summarize tag today >.Array;

# hey start @my_proj +tag1 +tag2
# hey start at 4 @my_proj +tag1 +tag2
# hey start at 4:30 @my_proj +tag1 +tag2
# hey start 4 minutes ago @my_proj +tag1 +tag2
# hey start 2 hours ago @my_proj +tag1

#| Start a new timer
multi sub MAIN('start',
		 *@start_args #= optional time adjustment, project(s), & optional tags
		) {
	CATCH {
		when Hey::Exceptions::Exitable { 
			$*ERR.say: .message;
			exit(.exit_code);
		}
        default {
            say .Str;
			exit(65); #  The input data was incorrect...probably.
			#  65 is just a guess. We don't really know what happened.
        }
    }
	my $db = DB::SQLite.new(filename => guarantee-db());
	my $connection = $db.db;
	my $time = DateTime.now().local;
	my %compiled_args = compile-timer-args(@start_args);

	if %compiled_args<projects>.elems == 0 {
		exit-with-help("must specify at least one project to start a timer.");
	}

	if %compiled_args<time_stuff>.elems > 0 {
		$time = adjusted-date-time($time, %compiled_args<time_stuff>);
	}
	my $event_hash = create-event($connection, "timer", $time.posix());
	# TODO figure out why i need .Array here
	# it's $["\@foo"] without it and ["\@foo"] with it
    for %compiled_args<projects>.Array -> $project_name {
		my $project_hash = find-or-create-project($project_name, $connection);
		bind-event-project($event_hash<id>, $project_hash<id>, $connection);
	}
	for %compiled_args<tags>.Array -> $tag { # may be empty list
		tag-event($tag, $event_hash<id>, $connection);
	}
	say("Started Timer ($event_hash<id>) for "
		~ %compiled_args<projects>.join(", ")
		~ " at "
		~ datestring($time)
	   );


	my $current_timers = current-timers($connection);
	if $current_timers ~~ Some {
		my $timers = $current_timers.value;
		if $timers.elems > 1 {
			say("You have multiple running timers now:");
			display-current-timers($connection, provided_timers => $timers);
		}
	}
}


# hey stop
# hey stop at 4
# hey stop at 4:30
# hey stop at 12/14 13:30
# hey stop 4 minutes ago
# hey stop 2 hours ago

#| stop an existing timer
multi sub MAIN('stop',
		*@stop_args #= optional id, and optional time adjustments (e.g. 4 minutes ago)
		) {

	CATCH {
		when Hey::Exceptions::Exitable { 
			$*ERR.say: .message;
			exit(.exit_code);
		}
        default {
            say .Str;
			exit(65); #  The input data was incorrect	in some	way.
			#  65 is just a guess. We don't really know what happened.
        }
    }

	my @args = @stop_args;
	my $db = DB::SQLite.new(filename => guarantee-db());
	my $connection = $db.db;
	my $time = DateTime.now().local;
	my $has_id = False;
	if (@stop_args.elems > 0
	   and @stop_args[0].match(/^ (\d+) $/)
	   and ( @stop_args.elems == 1
			 or ! time-units.includes(@stop_args[1]))) {
		$has_id = True
	}

	my $id_match =  $has_id
					 ?? @stop_args[0].match(/^ (\d+) $/)
					 !! Nil;
	@args = @stop_args.splice(1) if $id_match;
	my $simple_relative_time_match = @args && @args.elems > 0
									  ?? @args.join(" ").match(relative-time-regex)
									  !! Nil;
	# IF we have a realtive time match
	# then the id match is bogus. It's really something like 4 minutes not id 4
	my $id = ($id_match and (! $simple_relative_time_match))
			  ?? $id_match[0].Int
			  !! -1;

	my %compiled_args = compile-timer-args(@args);

	my $running_event;
	my $stopped_event;
	if ($id == -1) {
		my $maybe_last_event = find-last-event("timer", $connection, ongoing => True);
		if $maybe_last_event ~~ Some {
			$running_event = $maybe_last_event.value;
		}
	} else {
		my $maybe_running_event = find-event-by-id($id, 'timer', $connection);
		if $maybe_running_event ~~ Some {
			$running_event = $maybe_running_event.value;
		}
	}


	if $running_event {
		if %compiled_args<time_stuff>.elems > 0 {
			$time = adjusted-date-time($time,
									%compiled_args<time_stuff>,
									$running_event<started_at>);
		}

		if stop-specific-event($running_event<id>, $time.posix(), $connection) {
			$running_event<ended_at> = $time.posix();
			my $projects = timer-projects($running_event<id>, $connection);

			say("Stopped $running_event<id> at "
				~ datestring($time)
				~ " (@$($projects.map({$_<name>}).join(', @')))"
				~ " after "
				~ timer-duration($running_event));

		} else {
			note("error encountered while trying to stop timer $running_event<id>");
			exit(1);
		}
	} else {
		say("No timer was running");
		exit(65); # EX_DATAERR
	}
}

#| see a log of recent timers
multi sub MAIN("log",
			   Int $number, #= number of duration units
			   Str $duration #= duration string. E.g. minutes, hours, days, etc.
			  ) {

	generate-log("timers", $number, $duration);
}

#| see a log of today's timers
multi sub MAIN("today") {

	generate-log("timers", 1, 'day');
}



#| see a log of recent interruptions
multi sub MAIN("log", "interrupts",
			   Int $number, #= number of duration units
			   Str $duration  #= duration string. E.g. minutes, hours, days, etc.
			  ) {

	generate-log("interruptions", $number, $duration);
}

multi sub MAIN('summarize', 'timers',
			   Int $number, #= number of duration units
			   Str $duration #= duration string. E.g. minutes, hours, days, etc.
			  ) {
	generate-log("timer-summary", $number, $duration);
}


#| lets you know if there are any timers running & what they are for
multi sub MAIN("running") {
	my $db = DB::SQLite.new(filename => guarantee-db(), :readonly);
	my $connection = $db.db;
	my $anything_shown = display-current-timers($connection);
	say("No timers running.") unless $anything_shown;
}

#| Record an interruption
multi sub MAIN(Str $name, #= name of person / thing that interrupted you
		 *@start_args #= optional time adjustment, & optional projects, & optional tags
		) {

	if uninterruptable.includes($name) {
		# TODO - implement sensible defaults for the ones
		# we can, like log, and log-interrupts
		exit-with-help("I don't think that's quite right. Here are some docs...\n");
	}

	my $db = DB::SQLite.new(filename => guarantee-db());
	my $connection = $db.db;
	my $time = DateTime.now().local;
	my %compiled_args = compile-timer-args(@start_args);

	if %compiled_args<time_stuff>.elems > 0 {
		$time = adjusted-date-time($time, %compiled_args<time_stuff>)
	}

	my $event_hash = create-event($connection, "interruption", $time.posix());
	# TODO figure out why i need .Array here
	# it's $["\@foo"] without it and ["\@foo"] with it

	my $person_hash = find-or-create-person($name, $connection);
	bind-event-person($event_hash<id>, $person_hash<id>, $connection);
    for %compiled_args<projects>.Array -> $project_name {
		my $project_hash = find-or-create-project($project_name, $connection);
		bind-event-project($event_hash<id>, $project_hash<id>, $connection);
	}
	for %compiled_args<tags>.Array -> $tag { # may be empty list
		tag-event($tag, $event_hash<id>, $connection);
	}
	say("Gotcha. 'twas $name");
}

#| Remove an unwanted timer.
multi sub MAIN("kill",
			   "timer",
			   Int $id #= the id of the timer to delete.
			  ) {
	my $db = DB::SQLite.new(filename => guarantee-db());
	my $connection = $db.db;
	my $event_hash = find-event-by-id($id, "timer", $connection);
	if $event_hash ~~ Some {
		kill-event($id, $connection);
		say("It's dead Jim.");
	} else {
		note("You missed your shot! There's no timer with an id of $id.");
		exit 64;
	}
}

#| add tags to a specific event, by id
multi sub MAIN('tag',
			   Int $id, #= the id of the event to tag
			   *@tags #= the tags to associate with the event
			  ) {

	my $db = DB::SQLite.new(filename => guarantee-db());
	my $connection = $db.db;
	my $event_hash = find-event-by-id($id, "timer", $connection);
	if $event_hash ~~ Some {
		my @cleaned_tags =  @tags.map({.subst("+", '')}).grep({.chars > 0});
		if @cleaned_tags.elems == 0 {
			note("You need to pass me some tags kiddo.");
			exit 64;
		}
		for @cleaned_tags -> $tag {
			tag-event($tag, $id, $connection)
		}
		say("She's been well, and truly tagged.");
	} else {
		note("I couldn't find an event with an id of $id.");
		exit 64;
	}
}

#| Cancel & delete the most recent running timer
multi sub MAIN("nevermind") {

	my $db = DB::SQLite.new(filename => guarantee-db());
	my $connection = $db.db;
	my $current_timers = current-timers($connection);
	if $current_timers ~~ Some {
		my $timers = $current_timers.value;
		if ! $timers.is-empty {
			kill-event($timers.tail<id>, $connection);
			say("We shall never speak of it again.")
		} else {
			note("The wasn't anything running.");
		}
	}
}

#| Remove an unwanted person / thing from interruptions
multi sub MAIN("kill",
			   Str $name #= the name of the person/thing you wish to.... remove the records of
			  ){
	my $db = DB::SQLite.new(filename => guarantee-db());
	my $connection = $db.db;
	my $person_hash = unwrap(find-person($name, $connection), "$name wasn't found. Maybe they know what you're planning!");
	kill-person($person_hash<id>, $connection);
	say("$name is dead. Long live $name.");
}


#| lists all the projects
multi sub MAIN("projects") {
	my $db = DB::SQLite.new(filename => guarantee-db(), :readonly);
	my $connection = $db.db;
	say(find-x-names("projects", $connection).join("\n"));
}





#-----
# SUPPORT METHODS
#

sub generate-log(Str $type, Int $number, Str $duration){
	if ! time-units.includes($duration) {
		exit-with-help("You must specify a valid duration");
	}
	if $number < 1 {
		exit-with-help("You must specify at least 1 unit of duration. E.g. 1 week");
	}

	my $db = DB::SQLite.new(filename => guarantee-db(), :readonly);
	my $connection = $db.db;
	#TODO limit & group by day, or week or whatever
	my $since = DateTime.now().local;
	if (! ["minute", "minutes", "second", "seconds", "hour", "hours"].includes( $duration) ) {
		# we're talking days/months.
		# If you ask for 1 day you mean "today"
		if $duration eq 'day' or $duration eq 'days' {
			$since = midnightify($since);
		} else {
			# -1 because if we're on the first day already we don't want to go back past it.
			my $day_num = -1;
			if $duration eq 'week' or $duration eq 'weeks' {
				$day_num += $since.day-of-week;
			} elsif $duration eq 'month' or $duration eq 'months' {
				$day_num += $since.day-of-month;
			} else {
				$day_num += $since.day-of-year;
			}
			$since = midnightify($since.earlier(days => $day_num));
		}
		if $number > 1 {
			$since = $since.earlier([Pair.new($duration, $number - 1)]);
		}
	} else {
		$since = $since.earlier([Pair.new($duration, $number)]);
	}

	#Such Hack!
    # So Inelegant!
    if $type eq 'timers' or $type eq 'timer-summary' {
		my @timers = timers-since($since.posix(), $connection, order => 'ASC');
		for @timers -> %timer {
			populate-timer-relations(%timer, $connection);
		}
		if @timers.is-empty {
			say("No timers found");
			exit 0;
		}
		if $type eq 'timers' {
			display-timers-as-table(@timers, "All Timers", False );
		} else {
			# timer-summary
			display-timers-summary-as-table(@timers, "$number $duration Summary…" );
		}
	} else {
		my @interruptions = interruptions-since($since.posix(), $connection, order => 'ASC');
		for @interruptions -> %interruption {
			%interruption<projects> = interruption-projects(%interruption<id>, $connection);
			%interruption<people> = interruption-people(%interruption<id>, $connection);
			%interruption<tags> = interruption-tags(%interruption<id>, $connection);
		}
		if @interruptions.is-empty {
			say("No interruptions found");
			exit 0;
		}
		display-interruptions-as-table(@interruptions, "All Interruptions");
	}

}



sub compile-timer-args(@args) returns Hash {
	my @inner_args = @args;
	my $time_stuff = extract-time-adjustment-args(@inner_args.grep({ ! /^ <[@+]>/ }));
	if $time_stuff.elems > 0 {
		if $time_stuff[1] ~~ Str {
			# @inner_args = 4 mins ago
			@inner_args = @inner_args.splice(3);
		} else {
			given $time_stuff.elems {
				# @inner_args starts with "at" "<month>/<day>" "<hour>:<min>"
				when 4  { @inner_args = @inner_args.splice(3) }
				#2) @inner_args starts with  "at" "<hour>:<min>"
				#1) @inner_args starts with "at" "<hour>"
				when 1..2  { @inner_args = @inner_args.splice(2) }
				# uhh... no.
				default {
					exit-with-help("I um. I got confused about your time arguments.")
				}
			}
		}
	}

	my $projects = @inner_args.grep({.starts-with('@')}).map({substr($_, 1)});
	my $tags = @inner_args.grep({ $_.starts-with("+") }).map({substr($_, 1)});

	my %compiled_args = (
		"time_stuff" => $time_stuff,
		"projects" => $projects,
		"tags" => $tags
	);
	return %compiled_args;
}


sub guarantee-db() returns Str {
	my $db_path = "data/hey/hey.db";
	my $resource_path = guarantee-resource($db_path, Hey::Resourcer);

	return $resource_path;
}

sub datestring(DateTime $dt) returns Str {
	strftime("%a, %I:%M %p", $dt.local);
}


# 64 is user error
# EX_USAGE (64)	   The command was used	incorrectly, e.g., with	the
# wrong number	of arguments, a	bad flag, a bad	syntax
# in a	parameter, or whatever.
sub exit-with-help(Str $message, Int $exit_code = 64) {
	note($message);
	note($*USAGE);
	exit $exit_code;
}
